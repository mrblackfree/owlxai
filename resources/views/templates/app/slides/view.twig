{% extends "/layouts/main.twig" %}

{% set active_menu = '/app/slides' %}
{% set xdata = 'slideViewer' %}
{% block title slide.title.value|title %}

{% block template %}
<div x-data="{
    slide: {{ slide|json_encode }},
    currentSlide: 0,
    isFullscreen: false,
    isEditing: false,
    editingSlideIndex: null,
    editingSlide: null,
    
    init() {
        // Keyboard navigation
        document.addEventListener('keydown', (e) => {
            if (this.isFullscreen) {
                if (e.key === 'ArrowRight' || e.key === ' ') {
                    e.preventDefault();
                    this.nextSlide();
                } else if (e.key === 'ArrowLeft') {
                    e.preventDefault();
                    this.prevSlide();
                } else if (e.key === 'Escape') {
                    e.preventDefault();
                    this.exitFullscreen();
                }
            }
        });
    },
    
    nextSlide() {
        if (this.currentSlide < this.slide.slides.length - 1) {
            this.currentSlide++;
        }
    },
    
    prevSlide() {
        if (this.currentSlide > 0) {
            this.currentSlide--;
        }
    },
    
    goToSlide(index) {
        this.currentSlide = index;
    },
    
    enterFullscreen() {
        this.isFullscreen = true;
        document.documentElement.requestFullscreen();
    },
    
    exitFullscreen() {
        this.isFullscreen = false;
        if (document.fullscreenElement) {
            document.exitFullscreen();
        }
    },
    
    editSlide(index) {
        this.editingSlideIndex = index;
        this.editingSlide = JSON.parse(JSON.stringify(this.slide.slides[index]));
        this.isEditing = true;
    },
    
    async saveSlide() {
        try {
            const response = await api.patch(`/api/library/items/${this.slide.id}`, {
                slides: this.slide.slides.map((s, i) => 
                    i === this.editingSlideIndex ? this.editingSlide : s
                )
            });
            
            if (response.data) {
                this.slide.slides[this.editingSlideIndex] = this.editingSlide;
                this.isEditing = false;
                this.editingSlideIndex = null;
                this.editingSlide = null;
            }
        } catch (error) {
            console.error('Failed to save slide:', error);
            alert('Failed to save changes. Please try again.');
        }
    },
    
    async deleteSlide(index) {
        if (!confirm('Are you sure you want to delete this slide?')) return;
        
        try {
            const newSlides = this.slide.slides.filter((_, i) => i !== index);
            const response = await api.patch(`/api/library/items/${this.slide.id}`, {
                slides: newSlides
            });
            
            if (response.data) {
                this.slide.slides = newSlides;
                if (this.currentSlide >= newSlides.length) {
                    this.currentSlide = Math.max(0, newSlides.length - 1);
                }
            }
        } catch (error) {
            console.error('Failed to delete slide:', error);
            alert('Failed to delete slide. Please try again.');
        }
    },
    
    async exportPDF() {
        window.open(`/app/slides/${this.slide.id}/export/pdf`, '_blank');
    },
    
    async exportPPTX() {
        window.open(`/app/slides/${this.slide.id}/export/pptx`, '_blank');
    }
}" @fullscreenchange="if (!document.fullscreenElement) isFullscreen = false">
    {# Header #}
    <div class="mb-6">
        {% include "snippets/back.twig" with {link: 'app/slides', label: p__('button', 'Slides')} %}
        
        <div class="flex gap-4 justify-between items-start mt-4">
            <div>
                <h1>{{ slide.title.value }}</h1>
                <div class="flex items-center gap-4 text-sm text-content-dimmed mt-2">
                    <span class="flex items-center gap-1">
                        <i class="ti ti-layers-intersect"></i>
                        {{ slide.slides|length }} {{ __('slides') }}
                    </span>
                    <span class="flex items-center gap-1">
                        <i class="ti ti-palette"></i>
                        {{ slide.theme|default('professional') }}
                    </span>
                    <span class="flex items-center gap-1">
                        <i class="ti ti-calendar"></i>
                        {{ slide.createdAt|date('M d, Y') }}
                    </span>
                </div>
            </div>
            
            <div class="flex items-center gap-2">
                <button type="button" @click="enterFullscreen()" class="button button-dimmed">
                    <i class="ti ti-presentation"></i>
                    {{ p__('button', 'Present') }}
                </button>
                
                <div class="relative" x-data="{open: false}">
                    <button type="button" @click="open = !open" class="button">
                        <i class="ti ti-download"></i>
                        {{ p__('button', 'Export') }}
                    </button>
                    
                    <div x-show="open" @click.away="open = false" x-cloak
                         class="absolute right-0 mt-2 w-48 bg-main rounded-lg shadow-lg border border-line-dimmed z-10">
                        <button type="button" @click="exportPDF(); open = false" 
                                class="w-full text-left px-4 py-2 hover:bg-intermediate transition-colors">
                            <i class="ti ti-file-type-pdf mr-2"></i>
                            {{ __('Export as PDF') }}
                        </button>
                        <button type="button" @click="exportPPTX(); open = false"
                                class="w-full text-left px-4 py-2 hover:bg-intermediate transition-colors">
                            <i class="ti ti-file-type-ppt mr-2"></i>
                            {{ __('Export as PPTX') }}
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
    
    {# Main Content #}
    <div class="grid grid-cols-1 lg:grid-cols-4 gap-6">
        {# Slide Thumbnails #}
        <div class="lg:col-span-1">
            <div class="space-y-2 max-h-[calc(100vh-200px)] overflow-y-auto">
                <template x-for="(slideData, index) in slide.slides" :key="index">
                    <div @click="goToSlide(index)"
                         :class="{'border-primary': currentSlide === index}"
                         class="border-2 border-line rounded-lg p-3 cursor-pointer hover:border-line-dimmed transition-colors">
                        <div class="flex items-center justify-between mb-2">
                            <span class="text-xs text-content-dimmed" x-text="'Slide ' + (index + 1)"></span>
                            <div class="flex items-center gap-1">
                                <button type="button" @click.stop="editSlide(index)" 
                                        class="text-xs text-content-dimmed hover:text-content">
                                    <i class="ti ti-pencil"></i>
                                </button>
                                <button type="button" @click.stop="deleteSlide(index)"
                                        class="text-xs text-content-dimmed hover:text-red-500"
                                        x-show="slide.slides.length > 1">
                                    <i class="ti ti-trash"></i>
                                </button>
                            </div>
                        </div>
                        <h4 class="text-sm font-medium line-clamp-2" x-text="slideData.title"></h4>
                    </div>
                </template>
            </div>
        </div>
        
        {# Slide Preview #}
        <div class="lg:col-span-3">
            <div class="bg-white rounded-lg shadow-lg aspect-[16/9] flex items-center justify-center p-12"
                 :class="{
                     'bg-gradient-to-br from-gray-50 to-gray-100': slide.theme === 'professional',
                     'bg-gradient-to-br from-purple-50 to-pink-50': slide.theme === 'creative',
                     'bg-gray-50': slide.theme === 'minimal',
                     'bg-gray-900 text-white': slide.theme === 'dark',
                     'bg-gradient-to-br from-yellow-50 via-red-50 to-purple-50': slide.theme === 'colorful'
                 }">
                <div class="w-full max-w-4xl" x-show="slide.slides[currentSlide]">
                    <h2 class="text-4xl font-bold mb-8" 
                        :class="{'text-white': slide.theme === 'dark'}"
                        x-text="slide.slides[currentSlide].title"></h2>
                    
                    <div class="space-y-4">
                        <template x-for="(point, idx) in slide.slides[currentSlide].content" :key="idx">
                            <div class="flex items-start gap-3">
                                <span class="text-2xl mt-1" :class="{'text-white': slide.theme === 'dark'}">â€¢</span>
                                <p class="text-xl" :class="{'text-white': slide.theme === 'dark'}" x-text="point"></p>
                            </div>
                        </template>
                    </div>
                    
                    <div class="mt-12 text-sm text-gray-500" 
                         :class="{'text-gray-400': slide.theme === 'dark'}"
                         x-show="slide.slides[currentSlide].speaker_notes">
                        <p class="font-medium mb-1">{{ __('Speaker Notes:') }}</p>
                        <p x-text="slide.slides[currentSlide].speaker_notes"></p>
                    </div>
                </div>
            </div>
            
            {# Navigation Controls #}
            <div class="flex items-center justify-between mt-4">
                <button type="button" @click="prevSlide()" 
                        :disabled="currentSlide === 0"
                        class="button button-dimmed">
                    <i class="ti ti-chevron-left"></i>
                    {{ p__('button', 'Previous') }}
                </button>
                
                <div class="flex items-center gap-2">
                    <template x-for="(_, index) in slide.slides" :key="index">
                        <button type="button" @click="goToSlide(index)"
                                :class="{'bg-primary': currentSlide === index, 'bg-line': currentSlide !== index}"
                                class="w-2 h-2 rounded-full transition-colors"></button>
                    </template>
                </div>
                
                <button type="button" @click="nextSlide()" 
                        :disabled="currentSlide === slide.slides.length - 1"
                        class="button button-dimmed">
                    {{ p__('button', 'Next') }}
                    <i class="ti ti-chevron-right"></i>
                </button>
            </div>
        </div>
    </div>
    
    {# Edit Modal #}
    <div x-show="isEditing" x-cloak @click.self="isEditing = false"
         class="fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4">
        <div class="bg-main max-w-2xl w-full rounded-lg shadow-xl max-h-[90vh] overflow-y-auto">
            <div class="p-6 border-b border-line-dimmed">
                <h2 class="text-xl font-semibold">{{ __('Edit Slide') }}</h2>
            </div>
            
            <div class="p-6 space-y-4" x-show="editingSlide">
                <div>
                    <label class="text-sm font-medium text-content-dimmed mb-2 block">
                        {{ p__('label', 'Slide Title') }}
                    </label>
                    <input type="text" x-model="editingSlide.title" class="input">
                </div>
                
                <div>
                    <label class="text-sm font-medium text-content-dimmed mb-2 block">
                        {{ p__('label', 'Content Points') }}
                    </label>
                    <template x-for="(point, idx) in editingSlide.content" :key="idx">
                        <div class="flex items-center gap-2 mb-2">
                            <input type="text" x-model="editingSlide.content[idx]" class="input flex-1">
                            <button type="button" @click="editingSlide.content.splice(idx, 1)"
                                    class="text-red-500 hover:text-red-600">
                                <i class="ti ti-trash"></i>
                            </button>
                        </div>
                    </template>
                    <button type="button" @click="editingSlide.content.push('')"
                            class="text-sm text-primary">
                        <i class="ti ti-plus mr-1"></i>
                        {{ __('Add Point') }}
                    </button>
                </div>
                
                <div>
                    <label class="text-sm font-medium text-content-dimmed mb-2 block">
                        {{ p__('label', 'Speaker Notes') }}
                    </label>
                    <textarea x-model="editingSlide.speaker_notes" rows="4" class="input"></textarea>
                </div>
            </div>
            
            <div class="p-6 border-t border-line-dimmed flex justify-end gap-2">
                <button type="button" @click="isEditing = false" class="button button-dimmed">
                    {{ p__('button', 'Cancel') }}
                </button>
                <button type="button" @click="saveSlide()" class="button">
                    {{ p__('button', 'Save Changes') }}
                </button>
            </div>
        </div>
    </div>
    
    {# Fullscreen Presentation #}
    <div x-show="isFullscreen" x-cloak
         class="fixed inset-0 bg-black flex items-center justify-center z-50"
         @click="exitFullscreen()">
        <div class="w-full h-full flex items-center justify-center p-12" @click.stop>
            <div class="w-full max-w-6xl">
                <div x-show="slide.slides[currentSlide]" class="text-white">
                    <h1 class="text-6xl font-bold mb-12" x-text="slide.slides[currentSlide].title"></h1>
                    
                    <div class="space-y-6">
                        <template x-for="(point, idx) in slide.slides[currentSlide].content" :key="idx">
                            <div class="flex items-start gap-4">
                                <span class="text-4xl mt-1">â€¢</span>
                                <p class="text-3xl" x-text="point"></p>
                            </div>
                        </template>
                    </div>
                </div>
                
                <div class="absolute bottom-8 left-1/2 transform -translate-x-1/2 flex items-center gap-4">
                    <button type="button" @click.stop="prevSlide()" 
                            :disabled="currentSlide === 0"
                            class="text-white/50 hover:text-white disabled:opacity-50">
                        <i class="ti ti-chevron-left text-4xl"></i>
                    </button>
                    
                    <span class="text-white/50 text-xl">
                        <span x-text="currentSlide + 1"></span> / <span x-text="slide.slides.length"></span>
                    </span>
                    
                    <button type="button" @click.stop="nextSlide()" 
                            :disabled="currentSlide === slide.slides.length - 1"
                            class="text-white/50 hover:text-white disabled:opacity-50">
                        <i class="ti ti-chevron-right text-4xl"></i>
                    </button>
                </div>
                
                <button type="button" @click.stop="exitFullscreen()"
                        class="absolute top-8 right-8 text-white/50 hover:text-white">
                    <i class="ti ti-x text-4xl"></i>
                </button>
            </div>
        </div>
    </div>
</div>
{% endblock %}
